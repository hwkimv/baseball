#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// ==================== BLE ÏÑ§Ï†ï ====================
// UUIDÎäî Î∞òÎìúÏãú ÌîÑÎ°†Ìä∏ÏóîÎìú(useBleSwing) ÏΩîÎìúÏôÄ ÎèôÏùºÌïòÍ≤å ÎßûÏ∂∞Ïïº Ìï®
#define SERVICE_UUID           "6e400001-b5a3-f393-e0a9-e50e24dcca9e"
#define CHARACTERISTIC_UUID_TX "6e400003-b5a3-f393-e0a9-e50e24dcca9e" // NotifyÏö©
#define CHARACTERISTIC_UUID_RX "6e400002-b5a3-f393-e0a9-e50e24dcca9e" // ÏàòÏã†Ïö©(ÏÑ†ÌÉù)

// ==================== ÏÑºÏÑú Í∞ùÏ≤¥ ====================
Adafruit_MPU6050 mpu;

// ==================== BLE Í∞ùÏ≤¥ ====================
BLEServer* pServer = nullptr;
BLECharacteristic* pCharacteristic = nullptr;
bool deviceConnected = false;

// ==================== ÌååÎùºÎØ∏ÌÑ∞ (ÌäúÎãù) ====================
// ÌïÑÏöîÏóê Îî∞Îùº Î∞îÍøîÍ∞ÄÎ©∞ Ï°∞Ï†ï
float SWING_THRESHOLD = 18.0;    // Ïä§Ïúô Í∞êÏßÄ Í∞ÄÏÜçÎèÑ ÏûÑÍ≥ÑÍ∞í (m/s^2)
int   DEBOUNCE_MS = 300;         // Ïä§Ïúô ÌõÑ ÏµúÏÜå ÎåÄÍ∏∞ÏãúÍ∞Ñ (ms)
unsigned long lastSwingTime = 0; // ÎßàÏßÄÎßâ Ïä§Ïúô Í∏∞Î°ù ÏãúÍ∞Ñ

// ==================== ÏΩúÎ∞± ====================
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("‚úÖ BLE Connected");
  }
  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("‚ùå BLE Disconnected");
    pServer->startAdvertising(); // ÏûêÎèô Ïû¨Í¥ëÍ≥†
  }
};

// ==================== Ï¥àÍ∏∞Ìôî ====================
void setup() {
  Serial.begin(115200);
  Serial.println("ESP32 Swing Sensor Start...");

  // I2C ÏÑºÏÑú Ï¥àÍ∏∞Ìôî
  if (!mpu.begin()) {
    Serial.println("‚ùå MPU6050 not found, check wiring!");
    while (1) delay(10);
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_16_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  // BLE Ï¥àÍ∏∞Ìôî
  BLEDevice::init("ESP32-SWING"); // Î∏îÎ£®Ìà¨Ïä§ Ïù¥Î¶Ñ
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService* pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID_TX,
    BLECharacteristic::PROPERTY_NOTIFY
  );
  pCharacteristic->addDescriptor(new BLE2902());

  // RX(ÏÑ†ÌÉù) - Ïï±ÏóêÏÑú ÏÑ§Ï†ïÍ∞íÏùÑ Î≥¥ÎÇ¥Í≥† Ïã∂ÏùÑ Îïå ÏÇ¨Ïö©
  BLECharacteristic* pRxChar = pService->createCharacteristic(
    CHARACTERISTIC_UUID_RX,
    BLECharacteristic::PROPERTY_WRITE
  );
  pRxChar->setCallbacks(new BLECharacteristicCallbacks());

  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("üì° BLE Advertising Started...");
}

// ==================== Î£®ÌîÑ ====================
void loop() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // üëâ Í∞ÄÏÜçÎèÑ ÌÅ¨Í∏∞ Í≥ÑÏÇ∞ (Î≤°ÌÑ∞ ÌÅ¨Í∏∞ = sqrt(x¬≤+y¬≤+z¬≤))
  float accelMag = sqrt(a.acceleration.x * a.acceleration.x +
                        a.acceleration.y * a.acceleration.y +
                        a.acceleration.z * a.acceleration.z);

  unsigned long now = millis();

  // Ïä§Ïúô Í∞êÏßÄ
  if (accelMag > SWING_THRESHOLD && (now - lastSwingTime) > DEBOUNCE_MS) {
    lastSwingTime = now;
    Serial.printf("SWING detected! accel=%.2f\n", accelMag);

    if (deviceConnected) {
      // BLEÎ°ú "SWING" Ïã†Ìò∏ Ï†ÑÏÜ°
      pCharacteristic->setValue("SWING");
      pCharacteristic->notify();
    }
  }

  delay(10); // ÏÑºÏÑú Ìè¥ÎßÅ Ï£ºÍ∏∞ (10ms ‚âà 100Hz)
}
